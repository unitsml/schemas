<?xml version="1.0" encoding="UTF-8"?>
<!--
Development version:
This schema is a non-standard compliant extension of the UnitsML OASIS
standard and does not constitute or claim to constitute a standard itself
nor is it endorsed or developed by OASIS. The UnitsML OASIS standard xsd 
and additional information may be found at the following links:

https://www.oasis-open.org/committees/download.php/44626/UnitsML-v1.0-csd04.xsd
https://www.oasis-open.org/committees/download.php/43529/UnitsML-Guide-v1.0-wd01.pdf

   Units Markup language (UnitsML) Schema
    Website: http://unitsml.nist.gov
    Version History: http://unitsml.nist.gov/Schema/schema_changes.txt

Copyright (C) OASIS Open 2006 - 2011. All Rights Reserved.

All capitalized terms in the following text have the meanings
assigned to them in the OASIS Intellectual Property Rights Policy
(the "OASIS IPR Policy"). The full Policy may be found at the OASIS
website.

This document and translations of it may be copied and furnished
to others, and derivative works that comment on or otherwise explain
it or assist in its implementation may be prepared, copied, published,
and distributed, in whole or in part, without restriction of any
kind, provided that the above copyright notice and this section
are included on all such copies and derivative works. However, this
document itself may not be modified in any way, including by removing
the copyright notice or references to OASIS, except as needed for
the purpose of developing any document or deliverable produced by
an OASIS Technical Committee (in which case the rules applicable
to copyrights, as set forth in the OASIS IPR Policy, must be
followed) or as required to translate it into languages other than
English.

The limited permissions granted above are perpetual and will not
be revoked by OASIS or its successors or assigns.

This document and the information contained herein is provided on
an "AS IS" basis and OASIS DISCLAIMS ALL WARRANTIES, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF
THE INFORMATION HEREIN WILL NOT INFRINGE ANY OWNERSHIP RIGHTS OR
ANY IMPLIED WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
PURPOSE.

-->
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:unitsml="https://schema.unitsml.org/unitsml/2.0"
	targetNamespace="https://schema.unitsml.org/unitsml/2.0"
	xmlns:ver="http://www.w3.org/2007/XMLSchema-versioning"
	xmlns:vc="urn:ietf:params:xml:ns:vcard-4.0"
	elementFormDefault="qualified"
	attributeFormDefault="unqualified" version="2.0" ver:minVersion="1.1">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" schemaLocation="http://www.w3.org/2009/01/xml.xsd"/>
    <xsd:import namespace="urn:ietf:params:xml:ns:vcard-4.0" schemaLocation="https://www.iana.org/assignments/xml-registry/schema/vcard-4.0.xsd"/>
	<!--=== Root-Node of an UnitsML document ===-->
	<xsd:element name="UnitsML" type="unitsml:UnitsMLType">
		<xsd:annotation>
			<xsd:documentation>Container for UnitsML units, quantities, and prefixes.</xsd:documentation>
		</xsd:annotation>
	    <xsd:unique name="UniqueUnitSet">
	        <xsd:annotation>
	            <xsd:documentation>The uniqueness constraint allows to aggregate multiple objects from different authorities within a single UnitsML element.</xsd:documentation>
	        </xsd:annotation>
	        <xsd:selector xpath="unitsml:UnitSet/unitsml:Unit"/>
	        <xsd:field xpath="@domain"/>
	        <xsd:field xpath="@key"/>
	        <xsd:field xpath="@version"/>
	    </xsd:unique>
	    <xsd:unique name="UniqueCountedItemSet">
	        <xsd:annotation>
	            <xsd:documentation>The uniqueness constraint allows to aggregate multiple objects from different authorities within a single UnitsML element.</xsd:documentation>
	        </xsd:annotation>
	        <xsd:selector xpath="unitsml:CountedItemSet/unitsml:CountedItem"/>
	        <xsd:field xpath="@domain"/>
	        <xsd:field xpath="@key"/>
	        <xsd:field xpath="@version"/>
	    </xsd:unique>
	    <xsd:unique name="UniqueQuantitySet">
	        <xsd:annotation>
	            <xsd:documentation>The uniqueness constraint allows to aggregate multiple objects from different authorities within a single UnitsML element.</xsd:documentation>
	        </xsd:annotation>
	        <xsd:selector xpath="unitsml:QuantitySet/unitsml:Quantity"/>
	        <xsd:field xpath="@domain"/>
	        <xsd:field xpath="@key"/>
	        <xsd:field xpath="@version"/>
	    </xsd:unique>
	    <xsd:unique name="UniqueDimensionSet">
	        <xsd:annotation>
	            <xsd:documentation>The uniqueness constraint allows to aggregate multiple objects from different authorities within a single UnitsML element.</xsd:documentation>
	        </xsd:annotation>
	        <xsd:selector xpath="unitsml:DimensionSet/unitsml:Dimension"/>
	        <xsd:field xpath="@domain"/>
	        <xsd:field xpath="@key"/>
	        <xsd:field xpath="@version"/>
	    </xsd:unique>
	    <xsd:unique name="UniquePrefixSet">
	        <xsd:annotation>
	            <xsd:documentation>The uniqueness constraint allows to aggregate multiple objects from different authorities within a single UnitsML element.</xsd:documentation>
	        </xsd:annotation>
	        <xsd:selector xpath="unitsml:PrefixSet/unitsml:Prefix"/>
	        <xsd:field xpath="@domain"/>
	        <xsd:field xpath="@key"/>
	    </xsd:unique>
	    <xsd:unique name="UniqueConstantSet">
	        <xsd:annotation>
	            <xsd:documentation>The uniqueness constraint allows to aggregate multiple objects from different authorities within a single UnitsML element.</xsd:documentation>
	        </xsd:annotation>
	        <xsd:selector xpath="unitsml:ConstantSet/unitsml:Constant"/>
	        <xsd:field xpath="@domain"/>
	        <xsd:field xpath="@key"/>
	        <xsd:field xpath="@version"/>
	    </xsd:unique>
	    <xsd:unique name="UniqueRegulatoryBodies">
	        <xsd:selector xpath="unitsml:RegulatoryBody"/>
	        <xsd:field xpath="@domainKey"/>
	    </xsd:unique>
	    <xsd:keyref name="UniqueUnitSetRef" refer="unitsml:UniqueUnitSet">
	        <xsd:selector xpath=".//unitsml:UnitReference"/>
	        <xsd:field xpath="@domain"/>
	        <xsd:field xpath="@key"/>
	        <xsd:field xpath="@version"/>
	    </xsd:keyref>
	    <xsd:keyref name="UnitUniqueUnitSetRef" refer="unitsml:UniqueUnitSet">
	        <xsd:selector xpath="unitsml:UnitSet/unitsml:Unit/unitsml:PreviousVersion"/>
	        <xsd:field xpath="@domain"/>
	        <xsd:field xpath="@key"/>
	        <xsd:field xpath="@version"/>
	    </xsd:keyref>
	    <xsd:keyref name="UniqueCountedItemSetRef" refer="unitsml:UniqueCountedItemSet">
	        <xsd:selector xpath=".//unitsml:CountableItemReference"/>
	        <xsd:field xpath="@domain"/>
	        <xsd:field xpath="@key"/>
	        <xsd:field xpath="@version"/>
	    </xsd:keyref>
	    <xsd:keyref name="CountedItemUniqueCountedItemSetRef" refer="unitsml:UniqueCountedItemSet">
	        <xsd:selector xpath="unitsml:CountedItemSet/unitsml:CountedItem/unitsml:PreviousVersion"/>
	        <xsd:field xpath="@domain"/>
	        <xsd:field xpath="@key"/>
	        <xsd:field xpath="@version"/>
	    </xsd:keyref>
	    <xsd:keyref name="UniqueQuantitySetRef" refer="unitsml:UniqueQuantitySet">
	        <xsd:selector xpath=".//unitsml:QuantityReference"/>
	        <xsd:field xpath="@domain"/>
	        <xsd:field xpath="@key"/>
	        <xsd:field xpath="@version"/>
	    </xsd:keyref>
	    <xsd:keyref name="QuantityUniqueQuantitySetRef" refer="unitsml:UniqueQuantitySet">
	        <xsd:selector xpath="unitsml:QuantitySet/unitsml:Quantity/unitsml:PreviousVersion"/>
	        <xsd:field xpath="@domain"/>
	        <xsd:field xpath="@key"/>
	        <xsd:field xpath="@version"/>
	    </xsd:keyref>
	    <xsd:keyref name="UniqueDimensionSetRef" refer="unitsml:UniqueDimensionSet">
	        <xsd:selector xpath=".//unitsml:DimensionReference"/>
	        <xsd:field xpath="@domain"/>
	        <xsd:field xpath="@key"/>
	        <xsd:field xpath="@version"/>
	    </xsd:keyref>
	    <xsd:keyref name="UniquePrefixSetRef" refer="unitsml:UniquePrefixSet">
	        <xsd:selector xpath=".//unitsml:PrefixReference"/>
	        <xsd:field xpath="@domain"/>
	        <xsd:field xpath="@key"/>
	    </xsd:keyref>
	    <xsd:keyref name="ConstantUniqueConstantSetRef" refer="unitsml:UniqueConstantSet">
	        <xsd:selector xpath="unitsml:ConstantSet/unitsml:Constant/unitsml:PreviousVersion"/>
	        <xsd:field xpath="@domain"/>
	        <xsd:field xpath="@key"/>
	        <xsd:field xpath="@version"/>
	    </xsd:keyref>
	    <xsd:keyref name="UniqueRegulatoryBodiesRef" refer="unitsml:UniqueRegulatoryBodies">
	        <xsd:selector xpath="./unitsml:UnitSet | ./unitsml:CountedItemSet | ./unitsml:QuantitySet | ./unitsml:DimensionSet | ./unitsml:PrefixSet | ./unitsml:ConstantSet | ./unitsml:UnitSet/unitsml:Unit | ./unitsml:CountedItemSet/unitsml:CountedItem | ./unitsml:QuantitySet/unitsml:Quantity | ./unitsml:DimensionSet/unitsml:Dimension | ./unitsml:PrefixSet/unitsml:Prefix | ./unitsml:ConstantSet/unitsml:Constant"/>
	        <xsd:field xpath="@domain"/>
	    </xsd:keyref>
	</xsd:element>
	<xsd:complexType name="UnitsMLType">
		<xsd:annotation>
			<xsd:documentation>ComplexType for the root element of an UnitsML document.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
		    <xsd:element ref="unitsml:RegulatoryBody" minOccurs="0" maxOccurs="unbounded"/>
		    <xsd:element ref="unitsml:UnitSet" minOccurs="0" maxOccurs="unbounded"/>
		    <xsd:element ref="unitsml:CountedItemSet" minOccurs="0" maxOccurs="unbounded"/>
		    <xsd:element ref="unitsml:QuantitySet" minOccurs="0" maxOccurs="unbounded"/>
		    <xsd:element ref="unitsml:DimensionSet" minOccurs="0" maxOccurs="unbounded"/>
		    <xsd:element ref="unitsml:PrefixSet" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
	    <xsd:assert test="
	        every $var in unitsml:UnitSet/unitsml:Unit[exists(@timeStamp) and exists(unitsml:PreviousVersion)] satisfies (
	           if (exists(unitsml:UnitSet/unitsml:Unit[(@domain eq $var/unitsml:PreviousVersion/@domain) and (@key eq $var/unitsml:PreviousVersion/@key) and (@version eq $var/unitsml:PreviousVersion/@version)])) then
	               if (exists(unitsml:UnitSet/unitsml:Unit[(@domain eq $var/unitsml:PreviousVersion/@domain) and (@key eq $var/unitsml:PreviousVersion/@key) and (@version eq $var/unitsml:PreviousVersion/@version)]/@timeStamp)) then
	                   unitsml:UnitSet/unitsml:Unit[(@domain eq $var/unitsml:PreviousVersion/@domain) and (@key eq $var/unitsml:PreviousVersion/@key) and (@version eq $var/unitsml:PreviousVersion/@version)]/@timeStamp lt $var/@timeStamp
	               else
            	        true()
                else
	               false())">
	        <xsd:annotation>
	            <xsd:documentation>If a PreviousVersion element is used to reference a parent, check that the descendent does not predate the parent.</xsd:documentation>
	        </xsd:annotation>
	    </xsd:assert>
	    <xsd:assert test="
	        every $var in unitsml:CountedItemSet/unitsml:CountedItem[exists(@timeStamp) and exists(unitsml:PreviousVersion)] satisfies (
	           if (exists(unitsml:CountedItemSet/unitsml:CountedItem[(@domain eq $var/unitsml:PreviousVersion/@domain) and (@key eq $var/unitsml:PreviousVersion/@key) and (@version eq $var/unitsml:PreviousVersion/@version)])) then
	               if (exists(unitsml:CountedItemSet/unitsml:CountedItem[(@domain eq $var/unitsml:PreviousVersion/@domain) and (@key eq $var/unitsml:PreviousVersion/@key) and (@version eq $var/unitsml:PreviousVersion/@version)]/@timeStamp)) then
	                   unitsml:CountedItemSet/unitsml:CountedItem[(@domain eq $var/unitsml:PreviousVersion/@domain) and (@key eq $var/unitsml:PreviousVersion/@key) and (@version eq $var/unitsml:PreviousVersion/@version)]/@timeStamp lt $var/@timeStamp
	               else
	                   true()
	           else
	               false())">
	        <xsd:annotation>
	            <xsd:documentation>If a PreviousVersion element is used to reference a parent, check that the descendent does not predate the parent.</xsd:documentation>
	        </xsd:annotation>
	    </xsd:assert>
	    <xsd:assert test="
	        every $var in unitsml:QuantitySet/unitsml:Quantity[exists(@timeStamp) and exists(unitsml:PreviousVersion)] satisfies (
	           if (exists(unitsml:QuantitySet/unitsml:Quantity[(@domain eq $var/unitsml:PreviousVersion/@domain) and (@key eq $var/unitsml:PreviousVersion/@key) and (@version eq $var/unitsml:PreviousVersion/@version)])) then
	               if (exists(unitsml:QuantitySet/unitsml:Quantity[(@domain eq $var/unitsml:PreviousVersion/@domain) and (@key eq $var/unitsml:PreviousVersion/@key) and (@version eq $var/unitsml:PreviousVersion/@version)]/@timeStamp)) then
	                   unitsml:QuantitySet/unitsml:Quantity[(@domain eq $var/unitsml:PreviousVersion/@domain) and (@key eq $var/unitsml:PreviousVersion/@key) and (@version eq $var/unitsml:PreviousVersion/@version)]/@timeStamp lt $var/@timeStamp
	               else
	                   true()
	           else
	               false())">
	        <xsd:annotation>
	            <xsd:documentation>If a PreviousVersion element is used to reference a parent, check that the descendent does not predate the parent.</xsd:documentation>
	        </xsd:annotation>
	    </xsd:assert>
	    <xsd:assert test="
	        every $var in unitsml:DimensionSet/unitsml:Dimension[exists(@timeStamp) and exists(unitsml:PreviousVersion)] satisfies (
	           if (exists(unitsml:DimensionSet/unitsml:Dimension[(@domain eq $var/unitsml:PreviousVersion/@domain) and (@key eq $var/unitsml:PreviousVersion/@key) and (@version eq $var/unitsml:PreviousVersion/@version)])) then
	               if (exists(unitsml:DimensionSet/unitsml:Dimension[(@domain eq $var/unitsml:PreviousVersion/@domain) and (@key eq $var/unitsml:PreviousVersion/@key) and (@version eq $var/unitsml:PreviousVersion/@version)]/@timeStamp)) then
	                   unitsml:DimensionSet/unitsml:Dimension[(@domain eq $var/unitsml:PreviousVersion/@domain) and (@key eq $var/unitsml:PreviousVersion/@key) and (@version eq $var/unitsml:PreviousVersion/@version)]/@timeStamp lt $var/@timeStamp
	               else
	                   true()
	           else
	               false())">
	        <xsd:annotation>
	            <xsd:documentation>If a PreviousVersion element is used to reference a parent, check that the descendent does not predate the parent.</xsd:documentation>
	        </xsd:annotation>
	    </xsd:assert>
	    <xsd:assert test="
	        every $var in unitsml:ConstantSet/unitsml:Constant[exists(@timeStamp) and exists(unitsml:PreviousVersion)] satisfies (
	           if (exists(unitsml:ConstantSet/unitsml:Constant[(@domain eq $var/unitsml:PreviousVersion/@domain) and (@key eq $var/unitsml:PreviousVersion/@key) and (@version eq $var/unitsml:PreviousVersion/@version)])) then
	               if (exists(unitsml:ConstantSet/unitsml:Constant[(@domain eq $var/unitsml:PreviousVersion/@domain) and (@key eq $var/unitsml:PreviousVersion/@key) and (@version eq $var/unitsml:PreviousVersion/@version)]/@timeStamp)) then
	                   unitsml:ConstantSet/unitsml:Constant[(@domain eq $var/unitsml:PreviousVersion/@domain) and (@key eq $var/unitsml:PreviousVersion/@key) and (@version eq $var/unitsml:PreviousVersion/@version)]/@timeStamp lt $var/@timeStamp
	               else
	                   true()
	           else
	               false())">
	        <xsd:annotation>
	            <xsd:documentation>If a PreviousVersion element is used to reference a parent, check that the descendent does not predate the parent.</xsd:documentation>
	        </xsd:annotation>
	    </xsd:assert>
	    <!-- Global assert for previous version references allows for cross set history references(if one would like to separate versions into sets) -->
	    <xsd:assert test="
	        every $var in unitsml:UnitSet/unitsml:Unit[exists(unitsml:PreviousVersion) and exists(@version)] satisfies (
	           if (exists(unitsml:UnitSet/unitsml:Unit[(@domain eq $var/unitsml:PreviousVersion/@domain) and (@key eq $var/unitsml:PreviousVersion/@key) and (@version eq $var/unitsml:PreviousVersion/@version)])) then
	               true()
	           else
	               false())">
	        <xsd:annotation>
	            <xsd:documentation>Require that a linear version history is maintained. This does not allow branching.</xsd:documentation>
	        </xsd:annotation>
	    </xsd:assert>
	    <xsd:assert test="
	        every $var in unitsml:CountedItemSet/unitsml:CountedItem[exists(unitsml:PreviousVersion) and exists(@version)] satisfies (
	           if (exists(unitsml:CountedItemSet/unitsml:CountedItem[(@domain eq $var/unitsml:PreviousVersion/@domain) and (@key eq $var/unitsml:PreviousVersion/@key) and (@version eq $var/unitsml:PreviousVersion/@version)])) then
	               true()
	           else
	               false())">
	        <xsd:annotation>
	            <xsd:documentation>Require that a linear version history is maintained. This does not allow branching.</xsd:documentation>
	        </xsd:annotation>
	    </xsd:assert>
	    <xsd:assert test="
	        every $var in unitsml:QuantitySet/unitsml:Quantity[exists(unitsml:PreviousVersion) and exists(@version)] satisfies (
	           if (exists(unitsml:QuantitySet/unitsml:Quantity[(@domain eq $var/unitsml:PreviousVersion/@domain) and (@key eq $var/unitsml:PreviousVersion/@key) and (@version eq $var/unitsml:PreviousVersion/@version)])) then
	               true()
               else
	               false())">
	        <xsd:annotation>
	            <xsd:documentation>Require that a linear version history is maintained. This does not allow branching.</xsd:documentation>
	        </xsd:annotation>
	    </xsd:assert>
	    <xsd:assert test="
	        every $var in unitsml:DimensionSet/unitsml:Dimension[exists(unitsml:PreviousVersion) and exists(@version)] satisfies (
	           if (exists(unitsml:DimensionSet/unitsml:Dimension[(@domain eq $var/unitsml:PreviousVersion/@domain) and (@key eq $var/unitsml:PreviousVersion/@key) and (@version eq $var/unitsml:PreviousVersion/@version)])) then
	               true()
	           else
	               false())">
	        <xsd:annotation>
	            <xsd:documentation>Require that a linear version history is maintained. This does not allow branching.</xsd:documentation>
	        </xsd:annotation>
	    </xsd:assert>
	    <xsd:assert test="
	        every $var in unitsml:ConstantSet/unitsml:Constant[exists(unitsml:PreviousVersion) and exists(@version)] satisfies (
	           if (exists(unitsml:ConstantSet/unitsml:Constant[(@domain eq $var/unitsml:PreviousVersion/@domain) and (@key eq $var/unitsml:PreviousVersion/@key) and (@version eq $var/unitsml:PreviousVersion/@version)])) then
	               true()
	           else
	               false())">
	        <xsd:annotation>
	            <xsd:documentation>Require that a linear version history is maintained. This does not allow branching.</xsd:documentation>
	        </xsd:annotation>
	    </xsd:assert>
	</xsd:complexType>
	<!--=== Global document elements ===-->
    <xsd:element name="DimensionReference" type="unitsml:KeyedReferenceType">
        <xsd:annotation>
            <xsd:documentation>Element referencing a Dimension entity.</xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="UnitReference">
        <xsd:annotation>
            <xsd:documentation>Element for referencing a unit of measure from within the Quantity element.</xsd:documentation>
        </xsd:annotation>
        <xsd:alternative test="@url" type="unitsml:ReferenceType"/>
        <xsd:alternative test="@domain" type="unitsml:KeyedReferenceType"/>
        <xsd:alternative type="unitsml:ReferenceType"/>
    </xsd:element>
    <xsd:element name="CountableItemReference">
        <xsd:annotation>
            <xsd:documentation>Element for referencing a countable item from.</xsd:documentation>
        </xsd:annotation>
        <xsd:alternative test="@url" type="unitsml:ReferenceType"/>
        <xsd:alternative test="@domain" type="unitsml:KeyedReferenceType"/>
        <xsd:alternative type="unitsml:ReferenceType"/>
    </xsd:element>
    <!--     === Regulatory body elements ===-->
    <xsd:element name="RegulatoryBody" type="unitsml:RegulatoryBodyType">
        <xsd:annotation>
            <xsd:documentation>Data of the referenced regulatory bodies specifying an element describable by an instance document compliant with this schema.</xsd:documentation>
        </xsd:annotation>
    </xsd:element>
    <xsd:element name="NameOfEntity" type="unitsml:NameType">
        <xsd:annotation>
            <xsd:documentation>Element containing the unit name.</xsd:documentation>
        </xsd:annotation>
    </xsd:element>
	<!--     === Unit elements ===-->
	<xsd:element name="UnitSet" type="unitsml:UnitSetType">
		<xsd:annotation>
			<xsd:documentation>Container for units. Use in UnitsML container or directly incorporate into a host schema.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="Unit" type="unitsml:UnitType">
		<xsd:annotation>
			<xsd:documentation>Element for describing units. Use in containers UnitSet or directly incorporate into a host schema.</xsd:documentation>
		</xsd:annotation>
	    <xsd:unique name="UniqueQuantityReferenceInUnit">
	        <xsd:selector xpath="unitsml:QuantityReference"/>
	        <xsd:field xpath="@domain"/>
	        <xsd:field xpath="@key"/>
	        <xsd:field xpath="@version"/>
	    </xsd:unique>
	</xsd:element>
	<xsd:element name="UnitSystem" type="unitsml:SystemType">
		<xsd:annotation>
			<xsd:documentation>Container for describing the system of units.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="UnitName" type="unitsml:NameType">
		<xsd:annotation>
			<xsd:documentation>Element containing the unit name.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="UnitSymbol" type="unitsml:SymbolType">
		<xsd:annotation>
			<xsd:documentation>Element containing various unit symbols.  Examples include Aring (ASCII), Å (HTML).</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="UnitVersionHistory" type="unitsml:NoteType">
		<xsd:annotation>
			<xsd:documentation>Element for descriptive information, including version changes to the unit.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="CodeListValue" type="unitsml:CodeListValueType">
		<xsd:annotation>
			<xsd:documentation>Element for listing the unit code value from a specific code list.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="RootUnits" type="unitsml:RootUnitsType">
		<xsd:annotation>
			<xsd:documentation>Container for defining derived units in terms of their root units. This allows a precise definition of a wide range of units. The goal is to improve interoperability among applications and databases which use derived units based on commonly encountered root units.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="EnumeratedRootUnit" type="unitsml:EnumeratedRootUnitType">
		<xsd:annotation>
			<xsd:documentation>Element for a root unit (from an extensive enumerated list) allowing an optional prefix and power. E.g., mm^2</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="ExternalRootUnit" type="unitsml:ExternalRootUnitType">
		<xsd:annotation>
			<xsd:documentation>Element for those special cases where the root unit needed is not included in the enumerated list in the above element.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="Conversions" type="unitsml:ConversionsType">
		<xsd:annotation>
			<xsd:documentation>Container for providing conversion information to other units.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="Float64ConversionFrom" type="unitsml:Float64ConversionFromType">
		<xsd:annotation>
			<xsd:documentation>Element for providing factors for a conversion equation from another unit; y = d + ((b / c) (x + a))</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="ConversionNote" type="unitsml:NoteType">
		<xsd:annotation>
			<xsd:documentation>Element for descriptive information.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="SpecialConversionFrom" type="unitsml:SpecialConversionFromType">
		<xsd:annotation>
			<xsd:documentation>Element for providing unit conversion information for conversions that are more complex than the Float64ConversionFrom linear equation.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="WSDLConversionFrom" type="unitsml:WSDLConversionFromType">
		<xsd:annotation>
			<xsd:documentation>Element for providing conversion based on SOAP/WSDL calls to a remote server.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="WSDLDescription" type="unitsml:NoteType">
		<xsd:annotation>
			<xsd:documentation>Element to describe the WSDL service.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="ConversionDescription" type="unitsml:NoteType">
		<xsd:annotation>
			<xsd:documentation>Element for a description of the SpecialConversionFrom.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
    <xsd:element name="QuantityReference">
        <xsd:annotation>
            <xsd:documentation>Element for all quantities that can be expressed using this unit.</xsd:documentation>
        </xsd:annotation>
        <xsd:alternative test="@url" type="unitsml:ReferenceType"/>
        <xsd:alternative test="@domain" type="unitsml:KeyedReferenceType"/>
        <xsd:alternative type="unitsml:ReferenceType"/>
    </xsd:element>
	<xsd:element name="UnitDefinition" type="unitsml:DefinitionType">
		<xsd:annotation>
			<xsd:documentation>Element to describe the definition of the unit.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="UnitHistory" type="unitsml:HistoryType">
		<xsd:annotation>
			<xsd:documentation>Element to describe the historical development of the unit.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="UnitRemark" type="unitsml:RemarkType">
		<xsd:annotation>
			<xsd:documentation>Element as a placeholder for additional information.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!--     === Counted item elements ===-->
	<xsd:element name="CountedItemSet" type="unitsml:CountedItemSetType">
		<xsd:annotation>
			<xsd:documentation>Container for items that are counted and are (in practice) combined with scientific units of measure.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="CountedItem" type="unitsml:CountedItemType">
		<xsd:annotation>
			<xsd:documentation>Container for a single counted item.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="ItemName" type="unitsml:NameType">
		<xsd:annotation>
			<xsd:documentation>Element containing the item name(s).</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="ItemSymbol" type="unitsml:SymbolType">
		<xsd:annotation>
			<xsd:documentation>Element containing symbols for the item.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="ItemVersionHistory" type="unitsml:NoteType">
		<xsd:annotation>
			<xsd:documentation>Element for descriptive information, including version changes to the item.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="ItemDefinition" type="unitsml:DefinitionType">
		<xsd:annotation>
			<xsd:documentation>Element to describe the definition of the item.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="ItemHistory" type="unitsml:HistoryType">
		<xsd:annotation>
			<xsd:documentation>Element to describe the historical development of the item.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="ItemRemark" type="unitsml:RemarkType">
		<xsd:annotation>
			<xsd:documentation>Element as a placeholder for additional information.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!--     === Quantity elements ===-->
	<xsd:element name="QuantitySet" type="unitsml:QuantitySetType">
		<xsd:annotation>
			<xsd:documentation>Container for quantities.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="Quantity" type="unitsml:QuantityType">
		<xsd:annotation>
			<xsd:documentation>Element for describing quantities and referencing corresponding units. Use in container or directly incorporate into a host schema.</xsd:documentation>
		</xsd:annotation>
		<xsd:unique name="UniqueUnitReferenceInQuantity">
			<xsd:selector xpath="unitsml:UnitReference"/>
			<xsd:field xpath="@domain"/>
			<xsd:field xpath="@unitKey"/>
			<xsd:field xpath="@version"/>
		</xsd:unique>
	</xsd:element>
	<xsd:element name="QuantityName" type="unitsml:NameType">
		<xsd:annotation>
			<xsd:documentation>Element containing the quantity name.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="QuantitySymbol" type="unitsml:SymbolType">
		<xsd:annotation>
			<xsd:documentation>Element containing various quantity symbols.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="QuantityVersionHistory" type="unitsml:NoteType">
		<xsd:annotation>
			<xsd:documentation>Element for descriptive information, including version changes to the unit.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="QuantityDefinition" type="unitsml:DefinitionType">
		<xsd:annotation>
			<xsd:documentation>Element to describe the definition of the quantity.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="QuantityHistory" type="unitsml:HistoryType">
		<xsd:annotation>
			<xsd:documentation>Element to describe the historical development of the quantity.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="QuantityRemark" type="unitsml:RemarkType">
		<xsd:annotation>
			<xsd:documentation>Element as a placeholder for additional information.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!--     === Dimension elements ===-->
	<xsd:element name="DimensionSet" type="unitsml:DimensionSetType">
		<xsd:annotation>
			<xsd:documentation>Container for dimensions.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="Dimension" type="unitsml:DimensionType">
		<xsd:annotation>
			<xsd:documentation>Element to express the dimension of a unit or quantity in terms of the SI base quantities length, mass, time, electric current, thermodynamic temperature, amount of substance, and luminous intensity.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="Length" type="unitsml:LengthType">
		<xsd:annotation>
			<xsd:documentation>Element containing the dimension of the quantity length.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="Mass" type="unitsml:MassType">
		<xsd:annotation>
			<xsd:documentation>Element containing the dimension of the quantity mass.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="Time" type="unitsml:TimeType">
		<xsd:annotation>
			<xsd:documentation>Element containing the dimension of the quantity time.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="ElectricCurrent" type="unitsml:ElectricCurrentType">
		<xsd:annotation>
			<xsd:documentation>Element containing the dimension of the quantity electric current.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="ThermodynamicTemperature" type="unitsml:ThermodynamicTemperatureType">
		<xsd:annotation>
			<xsd:documentation>Element containing the dimension of the quantity thermodynamic temerature.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="AmountOfSubstance" type="unitsml:AmountOfSubstanceType">
		<xsd:annotation>
			<xsd:documentation>Element containing the dimension of the quantity amount of substance.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="LuminousIntensity" type="unitsml:LuminousIntensityType">
		<xsd:annotation>
			<xsd:documentation>Element containing the dimension of the quantity luminous intensity.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="PlaneAngle" type="unitsml:PlaneAngleType">
		<xsd:annotation>
			<xsd:documentation>Element containing the dimension of the quantity plane angle.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="Item" type="unitsml:ItemType">
		<xsd:annotation>
			<xsd:documentation>Element containing the dimension of any item. Note: this element is meant to be used to allow counted items to be included in the dimensioning of a derived quantity, e.g., electrons per time; usage of this element does not conform to the SI description of the dimension of a quantity in terms of seven base quantities.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!--     === Prefix elements ===-->
	<xsd:element name="PrefixSet" type="unitsml:PrefixSetType">
		<xsd:annotation>
			<xsd:documentation>Container for prefixes.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="Prefix" type="unitsml:PrefixType">
		<xsd:annotation>
			<xsd:documentation>Element containing information about a prefix.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="PrefixName" type="unitsml:NameType">
		<xsd:annotation>
			<xsd:documentation>Element containing the prefix name.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:element name="PrefixSymbol" type="unitsml:SymbolType">
		<xsd:annotation>
			<xsd:documentation>Element containing prefix symbols.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<!--=== Attribute groups (global) ===-->
    <xsd:attributeGroup name="timestamp">
        <xsd:attribute name="timeStamp" type="xsd:dateTime">
            <xsd:annotation>
                <xsd:documentation>Used to indicate the timepoint from which onward this element may be referenced.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>
    <xsd:attributeGroup name="keyedReferenceAttributeGroup">
        <xsd:annotation>
            <xsd:documentation>Attributes required for all reference elements.</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="domain" type="xsd:token" use="required">
            <xsd:annotation>
                <xsd:documentation>Domain of the referenced object.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="key" type="xsd:token" use="required">
            <xsd:annotation>
                <xsd:documentation>Key of the referenced object.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="version" type="xsd:positiveInteger" use="required">
            <xsd:annotation>
                <xsd:documentation>Version of the referenced object.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>
    <xsd:attributeGroup name="optionalKeyedReferenceAttributeGroup">
        <xsd:annotation>
            <xsd:documentation>Attributes required for all reference elements.</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="domain" type="xsd:token" use="optional">
            <xsd:annotation>
                <xsd:documentation>Domain of the referenced object.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="key" type="xsd:token" use="optional">
            <xsd:annotation>
                <xsd:documentation>Key of the referenced object.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="version" type="xsd:positiveInteger" use="optional">
            <xsd:annotation>
                <xsd:documentation>Version of the referenced object.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:attributeGroup>
	<xsd:attributeGroup name="initialUnit">
		<xsd:annotation>
			<xsd:documentation>URI indicating the unitID of the starting unit for the conversion. For units which are defined in the same document, the URI should consist of a pound sign (#) followed by the ID value.</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="initialUnit" type="xsd:anyURI" use="required">
			<xsd:annotation>
				<xsd:documentation>URI indicating the unitID of the starting unit for the conversion. For units which are defined in the same document, the URI should consist of a pound sign (#) followed by the ID value.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:attributeGroup>
	<xsd:attributeGroup name="sourceName">
		<xsd:annotation>
			<xsd:documentation>Name of relevant publication.</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="sourceName" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Name of relevant publication.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:attributeGroup>
	<xsd:attributeGroup name="sourceURL">
		<xsd:annotation>
			<xsd:documentation>Relevant URL for available information.</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="sourceURL" type="xsd:anyURI" use="optional">
			<xsd:annotation>
				<xsd:documentation>Relevant URL for available information.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:attributeGroup>
	<xsd:attributeGroup name="powerRational">
		<xsd:annotation>
			<xsd:documentation>An exponent of the unit, specified as powerNumerator and powerDenominator.</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="powerNumerator" type="xsd:byte" use="optional" default="1">
			<xsd:annotation>
				<xsd:documentation>An integer exponent of the unit.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="powerDenominator" type="xsd:byte" use="optional" default="1">
			<xsd:annotation>
				<xsd:documentation>An integer value divided into the powerNumerator to create a non integer exponent of a unit.  For example 1/2.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:attributeGroup>
	<xsd:attributeGroup name="prefix">
		<xsd:annotation>
			<xsd:documentation>Prefix identifier; e.g., m, k, M, G.  [Enumeration order is by prefix magnitude (Y to y) followed by binary prefixes.]</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="prefix">
			<xsd:annotation>
				<xsd:documentation>Prefix identifier; e.g., m, k, M, G.  [Enumeration order is by prefix magnitude (Y to y) followed by binary prefixes.]</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:restriction base="xsd:token">
					<boilerplate href="prefixes.xml"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
	</xsd:attributeGroup>
	<xsd:attributeGroup name="dimensionURL">
		<xsd:annotation>
			<xsd:documentation>URL to a representation of the unit or quantity in terms of the 7 SI base dimensions.</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="dimensionURL" type="xsd:anyURI">
			<xsd:annotation>
				<xsd:documentation>URL to a representation of the unit or quantity in terms of the 7 SI base dimensions.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:attributeGroup>
	<!--=== Type definitions ===-->
    <!--=== Regulatory Body specific Types ===-->
    <xsd:complexType name="RegulatoryBodyType">
        <xsd:annotation>
            <xsd:documentation>Type for the regulatory body container.</xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element ref="unitsml:NameOfEntity" minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element ref="vc:vcard" minOccurs="0" maxOccurs="1"/>
            <xsd:element name="Description" type="xsd:string" minOccurs="0"/>
        </xsd:sequence>
        <xsd:attribute name="domainKey" type="xsd:token" use="optional"/>
    </xsd:complexType>
	<!--     === Unit specific Types ===-->
	<xsd:complexType name="UnitSetType">
		<xsd:annotation>
			<xsd:documentation>Type for the unit container.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="unitsml:Unit" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Element for describing units. Use in containers UnitSet or directly incorporate into a host schema.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute name="domain" type="xsd:token" use="optional" inheritable="true">
			<xsd:annotation>
				<xsd:documentation>Sets the restricted domain for the entire
					set.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:assert test="
			if (exists(@domain)) then
			empty(./unitsml:Unit[@domain ne ../@domain])
			else
			true()">
			<xsd:annotation>
				<xsd:documentation>If a domain is given for a set, every member of the set must belong to the same domain.</xsd:documentation>
			</xsd:annotation>
		</xsd:assert>
	</xsd:complexType>
	<xsd:complexType name="UnitType">
		<xsd:annotation>
			<xsd:documentation>Type for the unit.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="unitsml:DimensionReference" minOccurs="0" maxOccurs="1"/>
			<xsd:element ref="unitsml:UnitSystem" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Container for describing the system(s) of units.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element ref="unitsml:UnitName" maxOccurs="unbounded"/>
			<xsd:element ref="unitsml:UnitSymbol" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element ref="unitsml:CodeListValue" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element ref="unitsml:RootUnits" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation>Container for defining derived units in terms of their root units. This allows a precise definition of a wide range of units. The goal is to improve interoperability among applications and databases which use derived units based on commonly encountered root units.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element ref="unitsml:Conversions" minOccurs="0"/>
			<xsd:element ref="unitsml:QuantityReference" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element ref="unitsml:UnitVersionHistory" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Element for descriptive information, including version changes to the unit.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="PreviousVersion" type="unitsml:KeyedReferenceType" minOccurs="0" maxOccurs="1"/>
			<xsd:element ref="unitsml:UnitDefinition" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element ref="unitsml:UnitHistory" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element ref="unitsml:UnitRemark" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
		<xsd:attribute ref="xml:id" use="optional"/>
		<xsd:attributeGroup ref="unitsml:optionalKeyedReferenceAttributeGroup"/>
		<xsd:attributeGroup ref="unitsml:timestamp"/>
		<xsd:attributeGroup ref="unitsml:dimensionURL">
			<xsd:annotation>
				<xsd:documentation>Reference to a representation of the unit or quantity in terms of the 7 SI base dimensions.</xsd:documentation>
			</xsd:annotation>
		</xsd:attributeGroup>
		<xsd:assert test="(@xml:id or (@domain and @key and @version))">
			<xsd:annotation>
				<xsd:documentation>Require at least one identification type via xml:id or domain,
					key, version triplet or both.</xsd:documentation>
			</xsd:annotation>
		</xsd:assert>
		<xsd:assert
			test="(not(@domain) and not(@key) and not(@version)) or (@domain and @key and @version)">
			<xsd:annotation>
				<xsd:documentation>Do not allow a partial reference</xsd:documentation>
			</xsd:annotation>
		</xsd:assert>
		<xsd:assert test="
			if (@version and (@version > 1)) then
				(exists(./unitsml:PreviousVersion) and (./unitsml:PreviousVersion/@version eq @version - 1) and (@key eq ./unitsml:PreviousVersion/@key) and (@domain eq ./unitsml:PreviousVersion/@domain))
			else
				not(exists(./unitsml:PreviousVersion))">
			<xsd:annotation>
				<xsd:documentation>If a version is specified then this constraint ensures a linear
					version history of the unit. Does not allow for a PreviousVersion element when
					version &lt; 2.</xsd:documentation>
			</xsd:annotation>
		</xsd:assert>
		<xsd:assert
			test="(@dimensionURL and not(exists(./unitsml:DimensionReference))) or (not(@dimensionURL) and exists(./unitsml:DimensionReference)) or (not(@dimensionURL) and not(exists(./unitsml:DimensionReference)))">
			<xsd:annotation>
				<xsd:documentation>Allow a reference to a Dimension via the dimensionURL or a
					DimensionReference element but not both.</xsd:documentation>
			</xsd:annotation>
		</xsd:assert>
	</xsd:complexType>
	<xsd:complexType name="CodeListValueType">
		<xsd:annotation>
			<xsd:documentation>Type for the element for listing the unit code value from a specific code list.</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="unitCodeValue" type="xsd:string" use="required">
			<xsd:annotation>
				<xsd:documentation>The code associated for this unit in a specific code list.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="codeListName" type="xsd:normalizedString">
			<xsd:annotation>
				<xsd:documentation>The name of the code list.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="codeListVersion" type="xsd:token">
			<xsd:annotation>
				<xsd:documentation>The version of the code list containing the unit code.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="locationURL" type="xsd:anyURI">
			<xsd:annotation>
				<xsd:documentation>Suggested retrieval location for this version of the code list.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<!-- TODO: could possibly be a vcard -->
		<xsd:attribute name="organizationName" type="xsd:normalizedString">
			<xsd:annotation>
				<xsd:documentation>Organization responsible for publication and/or maintenance of the code list.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="organizationURI" type="xsd:anyURI">
			<xsd:annotation>
				<xsd:documentation>URI for organization responsible for the code list.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute ref="xml:lang">
			<xsd:annotation>
				<xsd:documentation>Primary language of the element and/or its attributes. [See RFC 4646, RFC 4647 and ISO 639.]</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:complexType name="RootUnitsType">
		<xsd:annotation>
			<xsd:documentation>Type for the container for defining derived units in terms of their root units. This allows a precise definition of a wide range of units. The goal is to improve interoperability among applications and databases which use derived units based on commonly encountered base units.</xsd:documentation>
		</xsd:annotation>
		<xsd:choice>
			<xsd:sequence>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element ref="unitsml:EnumeratedRootUnit">
						<xsd:annotation>
							<xsd:documentation>Element for a root unit (from an extensive enumerated
								list) allowing an optional prefix and power. E.g.,
								mm^2</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element ref="unitsml:ExternalRootUnit">
						<xsd:annotation>
							<xsd:documentation>Element for those special cases where the root unit
								needed is not included in the enumerated list in the above
								element.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:choice>
			</xsd:sequence>
			<xsd:sequence>
				<xsd:choice maxOccurs="unbounded">
					<xsd:element name="UnitReference"
						type="unitsml:KeyedReferenceUnitWithPowerRationalType">
						<xsd:annotation>
							<xsd:documentation>Element for specifying particular units associated
								with the quantity.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
					<xsd:element name="PrefixReference">
						<xsd:complexType>
							<xsd:complexContent>
								<xsd:extension base="unitsml:KeyedReferencePrefixType">
									<xsd:sequence>
										<xsd:element name="UnitReference"
											type="unitsml:KeyedReferenceUnitWithPowerRationalType">
											<xsd:annotation>
												<xsd:documentation>Element for specifying particular
													units associated with the
													quantity.</xsd:documentation>
											</xsd:annotation>
										</xsd:element>
									</xsd:sequence>
								</xsd:extension>
							</xsd:complexContent>
						</xsd:complexType>
					</xsd:element>
				</xsd:choice>
			</xsd:sequence>
		</xsd:choice>
	</xsd:complexType>
	<xsd:complexType name="EnumeratedRootUnitType">
		<xsd:annotation>
			<xsd:documentation>Type for the element for a root unit (from an extensive enumerated list) allowing an optional prefix and power. E.g., mm^2</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="unit" use="required">
			<xsd:annotation>
				<xsd:documentation>Unit identifier; the enumerated list is basically English unit names in lowercase, with a few upper case exceptions, e.g., 32F, mmHg, pH.</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:restriction base="xsd:token">
					<boilerplate href="units.xml"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
		<xsd:attributeGroup ref="unitsml:sourceURL"/>
		<xsd:attributeGroup ref="unitsml:prefix">
			<xsd:annotation>
				<xsd:documentation>Prefix identifier; e.g., m, k, M, G. [Enumeration order is by prefix magnitude (Y to y) followed by binary prefixes.]</xsd:documentation>
			</xsd:annotation>
		</xsd:attributeGroup>
		<xsd:attributeGroup ref="unitsml:powerRational"/>
	</xsd:complexType>
	<xsd:complexType name="ExternalRootUnitType">
		<xsd:annotation>
			<xsd:documentation>Type for the element for those special cases where the root unit needed is not included in the enumerated list in the above element.</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="unit" type="xsd:anyURI" use="required">
			<xsd:annotation>
				<xsd:documentation>URI to identify the unit.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attributeGroup ref="unitsml:sourceURL">
			<xsd:annotation>
				<xsd:documentation>URI identifying the source and possibly the definition of the unit.</xsd:documentation>
			</xsd:annotation>
		</xsd:attributeGroup>
		<xsd:attribute name="annotation" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation>Optional unit annotation; e.g., a unit name if the unit identifier above is an uncommon code.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute ref="xml:lang"/>
		<xsd:attributeGroup ref="unitsml:prefix"/>
		<xsd:attributeGroup ref="unitsml:powerRational"/>
	</xsd:complexType>
	<xsd:complexType name="ConversionsType">
		<xsd:annotation>
			<xsd:documentation>Type for the container for providing conversion information to other units.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="unitsml:Float64ConversionFrom" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Element for providing factors for a conversion equation from another unit; y = d + ((b / c) (x + a)). Note: The related "conversion to" equation is a simple inversion of the above equation; i.e., x = ((c / b) (y - d)) - a.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element ref="unitsml:SpecialConversionFrom" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Element for describing a conversion that cannot be described by the linear expression in the element Float64ConversionFrom.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element ref="unitsml:WSDLConversionFrom" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Element for providing conversion based on SOAP/WSDL calls to a remote server.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name="Float64ConversionFromType">
		<xsd:annotation>
			<xsd:documentation>Type for the element for providing factors for a conversion equation from another unit; y = d + ((b / c) (x + a))</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="unitsml:ConversionNote" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
		<xsd:attribute ref="xml:id" use="required"/>
		<xsd:attributeGroup ref="unitsml:initialUnit"/>
		<xsd:attribute name="initialAddend" type="xsd:double" default="0">
			<xsd:annotation>
				<xsd:documentation>Number to be added at the start of the conversion (prior to multiplication or division) [factor 'a' in equation].</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="initialAddendDecimalPlace" type="xsd:byte">
			<xsd:annotation>
				<xsd:documentation>Indicates the position of the least
significant digit (in decimal) of
the initialAddend; the position of
this digit is given by ten to
additive inverse of this number.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="multiplicand" type="xsd:double" default="1">
			<xsd:annotation>
				<xsd:documentation>Number by which to multiply sum of initial addend and initial value [factor 'b' in equation].</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="multiplicandDigits" type="xsd:unsignedByte">
			<xsd:annotation>
				<xsd:documentation>Number of significant digits in the multiplicand value.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="divisor" type="xsd:double" default="1">
			<xsd:annotation>
				<xsd:documentation>Divisor to be applied to the value at the same time as the multiplicand [factor 'c' in equation].</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="divisorDigits" type="xsd:unsignedByte">
			<xsd:annotation>
				<xsd:documentation>Number of significant digits in the divisor value.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="finalAddend" type="xsd:double" default="0">
			<xsd:annotation>
				<xsd:documentation>Number to be added at the end of the conversion [factor 'd' in equation].</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="finalAddendDecimalPlace" type="xsd:byte">
			<xsd:annotation>
				<xsd:documentation>Indicates the position of the least
significant digit (in decimal) of
the finalAddend; the position of
this digit is given by ten to
additive inverse of this number.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="exact" type="xsd:boolean" default="false">
			<xsd:annotation>
				<xsd:documentation>Indicates if the conversion is exact.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:complexType name="SpecialConversionFromType">
		<xsd:annotation>
			<xsd:documentation>Type for the element for providing unit conversion information for conversions that are more complex than the Float64ConversionFrom linear equation.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="unitsml:ConversionDescription" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Description of the conversion.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute ref="xml:id" use="required"/>
		<xsd:attribute name="conversionURL" type="xsd:anyURI">
			<xsd:annotation>
				<xsd:documentation>URL for external description of the conversion or for an online convertor.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attributeGroup ref="unitsml:initialUnit"/>
	</xsd:complexType>
	<xsd:complexType name="WSDLConversionFromType">
		<xsd:annotation>
			<xsd:documentation>Type for the element for providing unit conversion information for conversions that are more complex than the Float64ConversionFrom linear equation.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="unitsml:WSDLDescription" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Description of the service.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute ref="xml:id" use="required"/>
		<xsd:attributeGroup ref="unitsml:initialUnit"/>
		<xsd:attribute name="wsdlURL" type="xsd:anyURI" use="required">
			<xsd:annotation>
				<xsd:documentation>URL for external WSDL definition file.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<!--     === CountedItem specific Types ===-->
	<xsd:complexType name="CountedItemSetType">
		<xsd:annotation>
			<xsd:documentation>Type for a set of counted items.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="unitsml:CountedItem" maxOccurs="unbounded"/>
		</xsd:sequence>
	<xsd:attribute name="domain" type="xsd:token" use="optional" inheritable="true">
			<xsd:annotation>
				<xsd:documentation>Sets the restricted domain for the entire
					set.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:assert test="
				if (exists(@domain)) then
					empty(./unitsml:CountedItem[@domain ne ../@domain])
				else
					true()">
			<xsd:annotation>
				<xsd:documentation>If a domain is given for a set, every member of the set must belong to the same domain.</xsd:documentation>
			</xsd:annotation>
		</xsd:assert>
	</xsd:complexType>
	<xsd:complexType name="CountedItemType">
		<xsd:annotation>
			<xsd:documentation>Type for a single counted item.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="unitsml:ItemName" maxOccurs="unbounded"/>
			<xsd:element ref="unitsml:ItemSymbol" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element ref="unitsml:ItemVersionHistory" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element name="PreviousVersion" type="unitsml:KeyedReferenceType" minOccurs="0" maxOccurs="1"/>
			<xsd:element ref="unitsml:ItemDefinition" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element ref="unitsml:ItemHistory" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element ref="unitsml:ItemRemark" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
		<xsd:attribute ref="xml:id" use="optional"/>
		<xsd:attributeGroup ref="unitsml:optionalKeyedReferenceAttributeGroup"/>
		<xsd:attributeGroup ref="unitsml:timestamp"/>
		<xsd:assert test="(@xml:id or (@domain and @key and @version))">
			<xsd:annotation>
				<xsd:documentation>Require at least one identification type via xml:id or domain, key, version triplet or both.</xsd:documentation>
			</xsd:annotation>
		</xsd:assert>
		<xsd:assert
			test="(not(@domain) and not(@key) and not(@version)) or (@domain and @key and @version)">
			<xsd:annotation>
				<xsd:documentation>Do not allow a partial reference</xsd:documentation>
			</xsd:annotation>
		</xsd:assert>
		<xsd:assert test="
			if (@version and (@version > 1)) then
				(exists(./unitsml:PreviousVersion) and (./unitsml:PreviousVersion/@version eq @version - 1) and (@key eq ./unitsml:PreviousVersion/@key) and (@domain eq ./unitsml:PreviousVersion/@domain))
			else
				not(exists(./unitsml:PreviousVersion))">
			<xsd:annotation>
				<xsd:documentation>If a version is specified then this constraint ensures a linear version history of the unit. Does not allow for a PreviousVersion element when version &lt; 2.</xsd:documentation>
			</xsd:annotation>
		</xsd:assert>
	</xsd:complexType>
	<!--     === Quantity specific Types ===-->
	<xsd:complexType name="QuantitySetType">
		<xsd:annotation>
			<xsd:documentation>Type for quantity container.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="unitsml:Quantity" maxOccurs="unbounded"/>
		</xsd:sequence>
	<xsd:attribute name="domain" type="xsd:token" use="optional" inheritable="true">
			<xsd:annotation>
				<xsd:documentation>Sets the restricted domain for the entire
					set.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:assert test="
				if (exists(@domain)) then
					empty(./unitsml:Quantity[@domain ne ../@domain])
				else
					true()">
			<xsd:annotation>
				<xsd:documentation>If a domain is given for a set, every member of the set must belong to the same domain.</xsd:documentation>
			</xsd:annotation>
		</xsd:assert>
	</xsd:complexType>
	<xsd:complexType name="QuantityType">
		<xsd:annotation>
			<xsd:documentation>Type for the quantity.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="unitsml:DimensionReference" minOccurs="0" maxOccurs="1"/>
			<xsd:element ref="unitsml:QuantityName" maxOccurs="unbounded"/>
			<xsd:element ref="unitsml:QuantitySymbol" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Element containing various quantity symbols.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:choice>
				<xsd:sequence>
					<xsd:element ref="unitsml:UnitReference" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>Element for specifying particular units associated with the
								quantity.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>					
				</xsd:sequence>
				<xsd:sequence>
					<xsd:element ref="unitsml:CountableItemReference" minOccurs="0" maxOccurs="unbounded">
						<xsd:annotation>
							<xsd:documentation>Element for specifying particular countable items associated with the
								quantity.</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
			</xsd:choice>
			<xsd:element ref="unitsml:QuantityVersionHistory" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Element for descriptive information, including version changes to the quantity.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
			<xsd:element name="PreviousVersion" type="unitsml:KeyedReferenceType" minOccurs="0" maxOccurs="1"/>
			<xsd:element ref="unitsml:QuantityDefinition" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element ref="unitsml:QuantityHistory" minOccurs="0" maxOccurs="unbounded"/>
			<xsd:element ref="unitsml:QuantityRemark" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
		<xsd:attribute ref="xml:id" use="optional"/>
		<xsd:attributeGroup ref="unitsml:optionalKeyedReferenceAttributeGroup"/>
		<xsd:attributeGroup ref="unitsml:timestamp"/>
		<xsd:attribute name="quantityType" use="optional">
			<xsd:annotation>
				<xsd:documentation>Type of the quantity.  For example base or derived.</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:restriction base="xsd:token">
					<xsd:enumeration value="base"/>
					<xsd:enumeration value="derived"/>
				</xsd:restriction>
			</xsd:simpleType>
			<!-- REVISE -->
		</xsd:attribute>
		<xsd:attributeGroup ref="unitsml:dimensionURL"/>
		<xsd:assert test="(@xml:id or (@domain and @key and @version))">
			<xsd:annotation>
				<xsd:documentation>Require at least one identification type via xml:id or domain,
					key, version triplet or both.</xsd:documentation>
			</xsd:annotation>
		</xsd:assert>
		<xsd:assert
			test="(not(@domain) and not(@key) and not(@version)) or (@domain and @key and @version)">
			<xsd:annotation>
				<xsd:documentation>Do not allow a partial reference.</xsd:documentation>
			</xsd:annotation>
		</xsd:assert>
		<xsd:assert test="
			if (@version and (@version > 1)) then
				(exists(./unitsml:PreviousVersion) and (./unitsml:PreviousVersion/@version eq @version - 1) and (@key eq ./unitsml:PreviousVersion/@key) and (@domain eq ./unitsml:PreviousVersion/@domain))
			else
				not(exists(./unitsml:PreviousVersion))">
			<xsd:annotation>
				<xsd:documentation>If a version is specified then this constraint ensures a linear
					version history of the unit. Does not allow for a PreviousVersion element when
					version &lt; 2.</xsd:documentation>
			</xsd:annotation>
		</xsd:assert>
		<xsd:assert
			test="(@dimensionURL and not(exists(./unitsml:DimensionReference))) or (not(@dimensionURL) and exists(./unitsml:DimensionReference)) or (not(@dimensionURL) and not(exists(./unitsml:DimensionReference))) ">
			<xsd:annotation>
				<xsd:documentation>Allow a reference to a Dimension via the dimensionURL or a
					DimensionReference element but not both.</xsd:documentation>
			</xsd:annotation>
		</xsd:assert>
	</xsd:complexType>
	<!--     === Dimension specific Types ===-->
	<xsd:complexType name="DimensionSetType">
		<xsd:annotation>
			<xsd:documentation>Type for the dimension container.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="unitsml:Dimension" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Element to express a unit or quantity in terms of the SI base quantities length, mass, time, electric current, thermodynamic temperature, amount of substance, and luminous intensity.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	<xsd:attribute name="domain" type="xsd:token" use="optional" inheritable="true">
			<xsd:annotation>
				<xsd:documentation>Sets the restricted domain for the entire
					set.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:assert test="
				if (exists(@domain)) then
					empty(./unitsml:Dimension[@domain ne ../@domain])
				else
					true()">
			<xsd:annotation>
				<xsd:documentation>If a domain is given for a set, every member of the set must belong to the same domain.</xsd:documentation>
			</xsd:annotation>
		</xsd:assert>
	</xsd:complexType>
	<xsd:complexType name="DimensionType">
		<xsd:annotation>
			<xsd:documentation>Type for dimension.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence maxOccurs="unbounded">
			<xsd:annotation>
				<xsd:documentation>This unbounded sequence allows any order of any number of elements; e.g., L^1 Â· L^-1.</xsd:documentation>
			</xsd:annotation>
			<xsd:element ref="unitsml:Length" minOccurs="0"/>
			<xsd:element ref="unitsml:Mass" minOccurs="0"/>
			<xsd:element ref="unitsml:Time" minOccurs="0"/>
			<xsd:element ref="unitsml:ElectricCurrent" minOccurs="0"/>
			<xsd:element ref="unitsml:ThermodynamicTemperature" minOccurs="0"/>
			<xsd:element ref="unitsml:AmountOfSubstance" minOccurs="0"/>
			<xsd:element ref="unitsml:LuminousIntensity" minOccurs="0"/>
			<xsd:element ref="unitsml:PlaneAngle" minOccurs="0"/>
			<xsd:element ref="unitsml:Item" minOccurs="0" maxOccurs="unbounded">
				<xsd:annotation>
					<xsd:documentation>Element containing the dimension of any item. Note: this element is meant to be used to allow counted items to be included in the dimensioning of a derived quantity, e.g., electrons per time; usage of this element does not conform to the SI description of the dimension of a quantity in terms of seven base quantities.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
		<xsd:attribute ref="xml:id" use="optional"/>
		<xsd:attributeGroup ref="unitsml:optionalKeyedReferenceAttributeGroup"/>
		<xsd:attributeGroup ref="unitsml:timestamp"/>
		<xsd:attribute name="dimensionless" type="xsd:boolean" use="optional" default="0">
			<xsd:annotation>
				<xsd:documentation>Boolean to designate that a quantity or unit is dimensionless.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	<xsd:assert test="(@xml:id or (@domain and @key and @version))"/>
		<xsd:assert test="(not(@domain) and not(@key) and not(@version)) or (@domain and @key and @version)"/>
	</xsd:complexType>
	<xsd:complexType name="LengthType">
		<xsd:annotation>
			<xsd:documentation>Type of the quantity length.</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="symbol" type="xsd:token" use="optional" fixed="L">
			<xsd:annotation>
				<xsd:documentation>Symbol of the quantity length.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attributeGroup ref="unitsml:powerRational"/>
	</xsd:complexType>
	<xsd:complexType name="MassType">
		<xsd:annotation>
			<xsd:documentation>Type of the quantity mass.</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="symbol" type="xsd:token" use="optional" fixed="M">
			<xsd:annotation>
				<xsd:documentation>Symbol of the quantity mass.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attributeGroup ref="unitsml:powerRational"/>
	</xsd:complexType>
	<xsd:complexType name="TimeType">
		<xsd:annotation>
			<xsd:documentation>Type of the quantity time.</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="symbol" type="xsd:token" use="optional" fixed="T">
			<xsd:annotation>
				<xsd:documentation>Symbol of the quantity time.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	    <xsd:attributeGroup ref="unitsml:powerRational"/>
	</xsd:complexType>
	<xsd:complexType name="ElectricCurrentType">
		<xsd:annotation>
			<xsd:documentation>Type of the quantity electric current.</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="symbol" type="xsd:token" use="optional" fixed="I">
			<xsd:annotation>
				<xsd:documentation>Symbol of the quantity electric current.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attributeGroup ref="unitsml:powerRational"/>
	</xsd:complexType>
	<xsd:complexType name="ThermodynamicTemperatureType">
		<xsd:annotation>
			<xsd:documentation>Type of the quantity thermodynamic temperature.</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="symbol" type="xsd:token" use="optional" fixed="Θ">
			<xsd:annotation>
				<xsd:documentation>Symbol of the quantity thermodynamic temperature.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attributeGroup ref="unitsml:powerRational"/>
	</xsd:complexType>
	<xsd:complexType name="AmountOfSubstanceType">
		<xsd:annotation>
			<xsd:documentation>Type of the quantity amount of substance.</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="symbol" type="xsd:token" use="optional" fixed="N">
			<xsd:annotation>
				<xsd:documentation>Symbol of the quantity amount of substance.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attributeGroup ref="unitsml:powerRational"/>
	</xsd:complexType>
	<xsd:complexType name="LuminousIntensityType">
		<xsd:annotation>
			<xsd:documentation>Type of the quantity luminous intensity.</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="symbol" type="xsd:token" use="optional" fixed="J">
			<xsd:annotation>
				<xsd:documentation>Symbol of the quantity luminous intensity.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attributeGroup ref="unitsml:powerRational"/>
	</xsd:complexType>
	<xsd:complexType name="PlaneAngleType">
		<xsd:annotation>
			<xsd:documentation>Type of the quantity plane angle.</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="symbol" type="xsd:token">
			<xsd:annotation>
				<xsd:documentation>Symbol of the quantity plane angle.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attributeGroup ref="unitsml:powerRational"/>
	</xsd:complexType>
	<xsd:complexType name="ItemType">
		<xsd:annotation>
			<xsd:documentation>Type of the quantity represented by a counted item, e.g., electron</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="itemURL" type="xsd:anyURI" use="required">
			<xsd:annotation>
				<xsd:documentation>Unique URL for identifying or describing the item.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="itemSymbol" type="xsd:token">
			<xsd:annotation>
				<xsd:documentation>Symbol for the item.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attributeGroup ref="unitsml:powerRational"/>
	</xsd:complexType>
	<!--     === Prefix specific Types ===-->
	<xsd:complexType name="PrefixSetType">
		<xsd:annotation>
			<xsd:documentation>Type for container for prefixes.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="unitsml:Prefix" maxOccurs="unbounded"/>
		</xsd:sequence>
	<xsd:attribute name="domain" type="xsd:token" use="optional" inheritable="true">
			<xsd:annotation>
				<xsd:documentation>Sets the restricted domain for the entire
					set.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:assert test="
				if (exists(@domain)) then
					empty(./unitsml:Prefix[@domain ne ../@domain])
				else
					true()">
			<xsd:annotation>
				<xsd:documentation>If a domain is given for a set, every member of the set must belong to the same domain.</xsd:documentation>
			</xsd:annotation>
		</xsd:assert>
	</xsd:complexType>
	<xsd:complexType name="PrefixType">
		<xsd:annotation>
			<xsd:documentation>Type for element for describing prefixes. Use in container PrefixSet.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element ref="unitsml:PrefixName" maxOccurs="unbounded"/>
			<xsd:element ref="unitsml:PrefixSymbol" minOccurs="0" maxOccurs="unbounded"/>
		</xsd:sequence>
		<xsd:attribute ref="xml:id" use="optional"/>
		<xsd:attribute name="domain" type="xsd:token" default="SI"/>
		<xsd:attribute name="key" type="xsd:token" use="optional"/>
		<xsd:attributeGroup ref="unitsml:timestamp"/>
		<xsd:attribute name="prefixBase" default="10">
			<xsd:annotation>
				<xsd:documentation>The base of the prefix system, i.e., 10 (SI) or 2 (binary).</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:restriction base="xsd:byte">
					<xsd:enumeration value="10"/>
					<xsd:enumeration value="2"/>
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:attribute>
		<xsd:attribute name="prefixPower" type="xsd:byte">
			<xsd:annotation>
				<xsd:documentation>The exponential power of the prefix with relation to the base.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	<xsd:assert test="(@xml:id or (@domain and @key))">
			<xsd:annotation>
				<xsd:documentation>Require at least one identification type via xml:id or domain
					and key duplett or both.</xsd:documentation>
			</xsd:annotation>
		</xsd:assert>
		<xsd:assert test="not(@key) or (@domain and @key)">
			<xsd:annotation>
				<xsd:documentation>Do not allow a partial reference</xsd:documentation>
			</xsd:annotation>
		</xsd:assert>
	</xsd:complexType>
	<!--     === General Types ===-->
	<xsd:complexType name="NameType">
		<xsd:annotation>
			<xsd:documentation>Type for name.  Used for names in units, quantities, and prefixes.</xsd:documentation>
		</xsd:annotation>
		<xsd:simpleContent>
			<xsd:extension base="xsd:token">
				<xsd:attribute ref="xml:lang"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
	<xsd:complexType name="SystemType">
		<xsd:annotation>
			<xsd:documentation>Type for unit system.</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="name" type="xsd:token" use="required">
			<xsd:annotation>
				<xsd:documentation>Name of the unit system.   For example, SI, inch-pound, CGS, and MKS.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="type" type="xsd:string" use="optional">
			<xsd:annotation>
				<xsd:documentation>Description of the unit relative to the unit system.  Examples are SI_base and non-SI_not_acceptable.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute ref="xml:lang"/>
	</xsd:complexType>
	<xsd:complexType name="SymbolType" mixed="true">
		<xsd:annotation>
			<xsd:documentation>Type for symbols.  Used in units, quantities, and prefixes.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence minOccurs="0" maxOccurs="unbounded">
			<xsd:any processContents="skip" maxOccurs="unbounded"/>
		</xsd:sequence>
		<xsd:attribute ref="xml:lang"/>
		<xsd:attribute name="type" use="required">
			<xsd:annotation>
				<xsd:documentation>Type of symbol representation.  Examples include ASCII, unicode, HTML, and MathML.</xsd:documentation>
			</xsd:annotation>
			<xsd:simpleType>
				<xsd:union memberTypes="xsd:token">
					<xsd:simpleType>
						<xsd:restriction base="xsd:token">
							<xsd:enumeration value="ASCII"/>
							<xsd:enumeration value="Unicode"/>
							<xsd:enumeration value="LaTeX"/>
							<xsd:enumeration value="HTML"/>
							<xsd:enumeration value="MathML"/>
							<xsd:enumeration value="SVG"/>
						</xsd:restriction>
					</xsd:simpleType>
				</xsd:union>
			</xsd:simpleType>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:complexType name="NoteType">
		<xsd:annotation>
			<xsd:documentation>Type for notes.  Used in units and conversion factors.</xsd:documentation>
		</xsd:annotation>
		<xsd:simpleContent>
			<xsd:extension base="xsd:string">
				<xsd:attribute ref="xml:lang"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
	<xsd:complexType name="DefinitionType">
		<xsd:annotation>
			<xsd:documentation>Type for definition.</xsd:documentation>
		</xsd:annotation>
		<xsd:simpleContent>
			<xsd:extension base="xsd:string">
			    <xsd:attributeGroup ref="unitsml:sourceURL"/>
			    <xsd:attributeGroup ref="unitsml:sourceName"/>
				<xsd:attribute ref="xml:lang"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
	<xsd:complexType name="HistoryType">
		<xsd:annotation>
			<xsd:documentation>Type for history.</xsd:documentation>
		</xsd:annotation>
		<xsd:simpleContent>
			<xsd:extension base="xsd:string">
			    <xsd:attributeGroup ref="unitsml:sourceURL"/>
			    <xsd:attributeGroup ref="unitsml:sourceName"/>
				<xsd:attribute ref="xml:lang"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
	<xsd:complexType name="RemarkType">
		<xsd:annotation>
			<xsd:documentation>Type for remark.</xsd:documentation>
		</xsd:annotation>
		<xsd:simpleContent>
			<xsd:extension base="xsd:string">
			    <xsd:attributeGroup ref="unitsml:sourceURL"/>
			    <xsd:attributeGroup ref="unitsml:sourceName"/>
				<xsd:attribute ref="xml:lang">
					<xsd:annotation>
						<xsd:documentation>Primary language of the element and/or its attributes. [See RFC 4646, RFC 4647 and ISO 639.]</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
	<xsd:complexType name="ReferenceType">
		<xsd:annotation>
			<xsd:documentation>Type for reference to a unit or quantity.</xsd:documentation>
		</xsd:annotation>
		<xsd:attribute name="url" type="xsd:anyURI" use="required">
			<xsd:annotation>
				<xsd:documentation>URL to the reference item.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute name="name" type="xsd:token" use="optional">
			<xsd:annotation>
				<xsd:documentation>Name of the referenced item.</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
		<xsd:attribute ref="xml:lang">
			<xsd:annotation>
				<xsd:documentation>Primary language of the element and/or its attributes. [See RFC 4646, RFC 4647 and ISO 639.]</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
    <xsd:complexType name="KeyedReferenceType">
        <xsd:annotation>
            <xsd:documentation>Type for reference to an indexed object.</xsd:documentation>
        </xsd:annotation>
        <xsd:attributeGroup ref="unitsml:keyedReferenceAttributeGroup"/>
    </xsd:complexType>
    <xsd:complexType name="KeyedReferenceUnitWithPowerRationalType">
        <xsd:complexContent>
            <xsd:extension base="unitsml:KeyedReferenceType">
                <xsd:attributeGroup ref="unitsml:powerRational"/>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    <xsd:complexType name="KeyedReferencePrefixType">
        <xsd:annotation>
            <xsd:documentation>Type for reference to a unit or quantity.</xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="domain" type="xsd:token" default="SI">
            <xsd:annotation>
                <xsd:documentation>Domain of the referenced quantity.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="key" type="xsd:token" use="required">
            <xsd:annotation>
                <xsd:documentation>Key of the referenced quantity.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="version" use="required">
            <xsd:annotation>
                <xsd:documentation>Version of the referenced quantity.</xsd:documentation>
            </xsd:annotation>
            <xsd:simpleType>
                <xsd:restriction base="xsd:positiveInteger">
                    <xsd:minInclusive value="1"/>
                </xsd:restriction>
            </xsd:simpleType>
        </xsd:attribute>
    </xsd:complexType>
</xsd:schema>
